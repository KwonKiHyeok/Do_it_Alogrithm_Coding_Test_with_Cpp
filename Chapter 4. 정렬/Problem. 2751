// Baekjoon Online Judge Problem. 2751

#include <iostream>
#include <vector>
using namespace std;

vector<int> merge_sort(vector<int>& arr, int left, int right);
vector<int> merge(vector<int>& left_arr, vector<int>& right_arr);

int main() {

	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);


	int N;
	cin >> N;

	vector<int> arr(N);
	vector<int> temp(N, 0);

	for (int i = 0; i < N; i++)
		cin >> arr[i];

	vector<int> result = merge_sort(arr, 0, arr.size() - 1);

	for (int i = 0; i < N; i++)
		cout << result[i] << '\n';

	return 0;

}

vector<int> merge_sort(vector<int>& arr, int left, int right) {
	
	if (left == right)
		return vector<int>{arr[left]};
	
	int mid = (left + right) / 2;
	vector<int> left_arr = merge_sort(arr, left, mid);
	vector<int> right_arr = merge_sort(arr, mid + 1, right);
	
	return merge(left_arr, right_arr);
}

vector<int> merge(vector<int>& left_arr, vector<int>& right_arr) {
	
	vector<int> result;
	int i = 0, j = 0;
	
	while (i < left_arr.size() && j < right_arr.size()) {

		if (left_arr[i] < right_arr[j]) {
			result.push_back(left_arr[i]);
			i++;
		}
		else {
			result.push_back(right_arr[j]);
			j++;
		}
	}

	while (i < left_arr.size()) {
		result.push_back(left_arr[i]);
		i++;
	}
	while (j < right_arr.size()) {
		result.push_back(right_arr[j]);
		j++;
	}

	return result;
}
