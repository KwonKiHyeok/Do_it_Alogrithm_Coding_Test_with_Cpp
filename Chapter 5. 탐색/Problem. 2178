// Baekjoon Online Judge Problem. 2178

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

void BFS(vector<vector<int>>& matrix, vector<vector<int>>& visited, pair<int, int> node);
int answer;

int main() {
	int N, M;

	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> N >> M;
	vector<vector<int>> matrix(N, vector<int>(M, 0));
	vector<vector<int>> visited(N, vector<int>(M, -1));

	for (int i = 0; i < N; i++) {
		string row;
		cin >> row;
		for (int j = 0; j < M; j++) {
			matrix[i][j] = row[j] - '0';
		}
	}
	
	BFS(matrix, visited, { 0, 0 });

	cout << visited[N-1][M-1];
	return 0;
}

void BFS(vector<vector<int>>& matrix, vector<vector<int>>& visited, pair<int, int> node) {
	
	int y = node.first, x = node.second;
	int dx[4] = { 1, 0, -1, 0 };
	int dy[4] = { 0, 1, 0, -1 };

	queue<pair<int, int>> q;
	q.push({ x, y });
	visited[y][x] = 1;

	while (!q.empty()) {
		pair<int, int> cur = q.front(); q.pop();

		for (int i = 0; i < 4; i++) {
			int n_x = cur.first + dx[i];
			int n_y = cur.second + dy[i];

			if (-1 < n_y && n_y < visited.size() && -1 < n_x && n_x < visited[0].size()) {
				if (visited[n_y][n_x] == -1 && matrix[n_y][n_x] == 1) {
					visited[n_y][n_x] = visited[cur.second][cur.first] + 1;
					q.push({ n_x, n_y });
				}
			}
			else continue;
		}
	}
}
