// Baekjoon Online Judge Problem. 2023

#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

void DFS(int node, vector<int>& v, int depth);
int N;

int main() {
	
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> N;

	vector<int> v;
	int arr[4] = { 2, 3, 5, 7 };

	for (int i : arr) {
		v.push_back(i);
		DFS(i, v, 1);
		v.pop_back();
	}

	return 0;
}

void DFS(int node, vector<int>& v, int depth) {

	if (depth > N)
		return;
	else if (depth < N) {

		int number = 0;
		for (int i = 0; i < v.size(); i++) {
			number += v[i] * pow(10, v.size() - i - 1);
		}

		for (int i = 2; i <= sqrt(number); i++) {
			if (number % i == 0)
				return;
		}

		int arr[5] = { 1, 3, 5, 7, 9 };

		for (int i : arr) {
			v.push_back(i);
			DFS(i, v, depth + 1);
			v.pop_back();
		}
	}
	else {
		int number = 0;
		for (int i = 0; i < v.size(); i++) {
			number += v[i] * pow(10, v.size() - i - 1);
		}

		for (int i = 2; i <= sqrt(number); i++) {
			if (number % i == 0)
				return;
		}
		cout << number << '\n';
		return;
	}
}
