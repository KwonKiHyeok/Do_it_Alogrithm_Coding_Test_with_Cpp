// Baekjoon Online Judge Problem. 11724

#include <iostream>
#include <vector>
#include <stack>
using namespace std;

void dfs(vector<vector<int>>& graph, vector<bool>& visited, int node);

int main() {
	int N, M;

	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> N >> M;
	vector<vector<int>> graph(N + 1);
	vector<bool> visited(N + 1, false);
	stack<int> s;

	for (int i = 0; i < M; i++) {
		int u, v;
		cin >> u >> v;
		graph[u].push_back(v);
		graph[v].push_back(u);
	}
	
	int answer = 0;
	for (int i = 1; i < N + 1; i++) {
		if (visited[i] == false) {
			dfs(graph, visited, i);
			answer++;
		}
	}
	cout << answer;
	return 0;
}

void dfs(vector<vector<int>>& graph, vector<bool>& visited, int node) {
	if (visited[node])
		return;

	visited[node] = true;

	for (int neighbor : graph[node]) {
		if (visited[neighbor] == false)
			dfs(graph, visited, neighbor);
	}
}
