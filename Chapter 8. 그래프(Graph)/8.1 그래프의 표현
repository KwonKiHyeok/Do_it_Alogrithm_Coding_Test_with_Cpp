1. Edge List
 Edge List는 Edge를 중심으로 그래프를 표현하는 방법이다. Edge List는 배열에 출발 노드, 도착 노드를 저장하여 Edge를 표현한다. 또는 출발 노드, 도착 노드, 가중치를 저장하여 가중치가 있는 Edge를 표현한다.

- 무방향 그래프일 경우 (A, B)와 (B, A)는 동일한 간선으로 간주된다.
- 방향 그래프일 경우 (A, B)는 A에서 B로 향하는 간선이다.

 Edge List는 특정 노드와 관련된 Edge를 탐색하기는 쉽지 않다. 따라서 노드 사이의 최단 거리를 구하는 벨만-포드나 최소 신장 트리를 찾는 크루스칼 알고리즘에 사용하며, 노드 중심 알고리즘에는 잘 사용하지 않는다.


2. 인접 행렬(adjacency matrix)
 인접 행렬(adjacency matrix)은 2차원 배열을 자료구조로 이용하여 그래프를 표현한다. 인접 행렬은 Edge List와 다르게 노드 중심으로 그래프를 표현한다. 정점이 n개라면, n×n 크기의 행렬을 만든다.
 만약 가중치가 있다면 1대신 가중치 값을 저장한다. 위의 그래프는 무방향 그래프이므로 대칭임을 알 수 있다.


3. 인접 리스트(adjacency list)
 C++의 인접 리스트(adjacency list)는 이차원 벡터로 그래프를 표현한다. 자료형은 문제의 조건에 맞게 설정한다. 
 인접 리스트로 가중치 없는 그래프를 표현할 때는 int 데이터 하나로 그래프를 표현하기에 충분하므로 vector<vector<int>> A로 선언한다. 인접 리스트에는 N번 노드와 연결된 노드를 벡터의 위치 N에 연결된 노드 개수만큼 노드의 데이터를 push_back()으로 더하는 방식으로 표현한다.
 인접 리스트로 가중치 있는 그래프를 표현할 때는 (도착 노드, 가중치)를 갖는 pair 클래스를 이차원 벡터에 사용한다. vector<vector<pair<int, int>> A로 선언한다. 

 인접 리스트는 노드와 연결된 Edge를 탐색하는 시간이 매우 뛰어나며, 노드 개수가 커도 공간 효율이 좋아 메모리 초과 에러도 발생하지 않는다. 이런 장점으로 실제 코딩 테스트에서는 인접 리스트를 이용한 그래프 구현을 선호한다.

