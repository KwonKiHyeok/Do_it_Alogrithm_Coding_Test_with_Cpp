// Baekjoon Online Judge Problem. 1325

#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

int DFS(vector<vector<int>>& computer, vector<bool> &visited, int start);
vector<int> result;

int main() {

	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N, M;
	cin >> N >> M;

	vector<vector<int>> computer(N + 1);

	for (int i = 0; i < M; i++) {
		int A, B;
		cin >> A >> B;

		computer[B].push_back(A);
	}

	int maximum = 0;
	result.resize(N + 1, 0);

	for (int i = 1; i <= N; i++) {
		vector<bool> visited(N + 1, false);
		result[i] = DFS(computer, visited, i);
		maximum = max(maximum, result[i]);
	}

	for (int i = 1; i <= N; i++) {
		if (result[i] == maximum)
			cout << i << ' ';
	}

	return 0;
}

int DFS(vector<vector<int>>& computer, vector<bool> &visited, int start) {

	visited[start] = true;
	int count = 1;

	for (int i : computer[start]) {
		if (visited[i] == false) {
			count += DFS(computer, visited, i);
		}
	}

	return count;
}
